#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable

#include "shared.glsl"

layout(local_size_x = DT_LOCAL_SIZE_X, local_size_y = DT_LOCAL_SIZE_Y, local_size_z = 1) in;

layout(std140, set = 0, binding = 1) uniform params_t
{
  float radius;
  float strength;
} params;


layout( // input aux
    set = 1, binding = 0
) uniform sampler2D img_in;

layout( // output aux
    set = 1, binding = 1
) uniform writeonly image2D img_out;

void
main()
{
  ivec2 ipos = ivec2(gl_GlobalInvocationID);
  if(any(greaterThanEqual(ipos, imageSize(img_out)))) return;

  // we'll read blurred input from a downsampled image, so we want to smooth it during upsampling:
  vec4 aux = textureLod(img_in, (ipos+.5)/vec2(imageSize(img_out)), 0);

  // TODO: do some compute on aux

  imageStore(img_out, ipos, aux);
}
