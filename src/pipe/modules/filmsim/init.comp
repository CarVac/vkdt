#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable

#include "shared.glsl"

layout(local_size_x = DT_LOCAL_SIZE_X, local_size_y = DT_LOCAL_SIZE_Y, local_size_z = 1) in;

layout(std140, set = 0, binding = 1) uniform params_t
{
  float radius;
  float strength;
  // TODO: we want:
  // 3 b/w mixture weights
  // 2 toe slope/highlight rolloff
  // 1 initial developer concentration
  // 1 crystal radius distribution parameter
  // 1 silver halide density distribution parameter
} params;


layout( // input image
    set = 1, binding = 0
) uniform sampler2D img_in;

layout( // output aux channels (developer concentration, active crystals, crystal radius, silver halide density)
    set = 1, binding = 1
) uniform writeonly image2D img_aux;

void
main()
{
  ivec2 ipos = ivec2(gl_GlobalInvocationID);
  if(any(greaterThanEqual(ipos, imageSize(img_aux)))) return;

  vec3 rgb = texelFetch(img_in, ipos, 0).rgb;
  vec4 aux;

  // black and white for now:
  vec3 colw = vec3(1, 1, 1)/3.0; // TODO: make parameter
  float b = dot(colw, rgb);

  aux.y = b; // active crystals per pixel (TODO: toe slope and highlight rolloff)
  aux.x = 1.0; // developer concentration (TODO: get from parameter)
  aux.z = 1.0; // initial crystal radius (TODO: generate from distribution and treat as average for this pixel)
  aux.w = 1.0; // initial silver halide density (TODO: vary a bit with grain)

  imageStore(img_aux, ipos, aux);
}
